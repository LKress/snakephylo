# Main entrypoint for snakephylo workflow.
# @authors: Luis Kress, Johannes Hausmann
#
# This workflow generates phylogenetic trees based on single copy orthologes.

import pandas as pd
import os

configfile: workflow.source_path('../config/config.yml')

wildcards = glob_wildcards('data/{dataset}/{gene}.fasta')


rule all:
    input:
        expand('results/{dataset}/trees/SUPERTREE.nwk', dataset=wildcards.dataset)

rule mafft:
    '''
    Create a multiple sequence alignment using MAFFT.
    '''
    input:
        fasta = 'data/{dataset}/{gene}.fasta'
    output:
        aligned_fa = 'results/{dataset}/msa/{gene}.aligned.fasta'
    conda:
        'envs/mafft.yml'
    params:
        maxiterate = config['mafft']['maxiterate']
    threads:
        config['mafft']['threads']
    log:
        'results/{dataset}/log/{gene}_mafft.log'
    shell:
        'mafft --maxiterate {params.maxiterate} --globalpair --thread {threads} '
        '{input.fasta} > {output.aligned_fa} 2> {log}'


rule trimming:
    '''
    Trim the multiple sequence alignment with ClipKIT.
    '''
    input:
        alignment = rules.mafft.output
    output:
        trimmed = 'results/{dataset}/msa/{gene}.trimmed.fasta'
    conda:
        'envs/clipkit.yml'
    log:
        'results/{dataset}/log/{gene}_clipkit.log'
    shell:
        '''
	    clipkit {input.alignment} -m kpic-smart-gap -o {output.trimmed} &> {log}
        '''

rule supertree:
    '''
    Generate a tree for each gene with IQ-Tree.
    '''
    input:
        trimmed = rules.trimming.output.trimmed
    output:
        tree = 'results/{dataset}/msa/{gene}.trimmed.fasta.treefile'
    conda:
        'envs/iqtree.yml'
    threads:
        config['iqtree']['threads']
    log:
        'results/{dataset}/log/{gene}_iqtree.log'
    shell:
        '''
        iqtree -s {input.trimmed} -redo -bb 1000 -nt 2 &> {log}
        '''

rule concat_trees:
    '''
    Concatenates the gene trees from the IQ-Tree output into one file.
    '''
    input:
        trees = expand('results/{dataset}/msa/{gene}.trimmed.fasta.treefile', 
                       zip, gene=wildcards.gene, dataset=wildcards.dataset)
    output:
        genetrees = 'results/{dataset}/trees/GENETREES.nwk'
    shell:
        '''
        cat {input.trees} > {output.genetrees}
        '''

rule astral:
    '''
    Generate a supertree from the concatenated genetrees
    '''
    input:
        genetrees = rules.concat_trees.output.genetrees
    output:
        supertree = 'results/{dataset}/trees/SUPERTREE.nwk'
    conda:
        'envs/astral.yml'
    log:
        'results/{dataset}/log/astral.log'
    shell:
        '''
        astral -i {input.genetrees} -o {output.supertree} &> {log}
        '''

